"""
Solving Day 1, 2019 Advent of Code Challenge
---
Santa has become stranded at the edge of the Solar System while delivering presents to other planets! To accurately calculate his position in space, safely align his warp drive, and return to Earth in time to save Christmas, he needs you to bring him measurements from fifty stars.

Collect stars by solving puzzles.  Two puzzles will be made available on each day in the Advent calendar; the second puzzle is unlocked when you complete the first.  Each puzzle grants one star. Good luck!


The Elves quickly load you into a spacecraft and prepare to launch.
At the first Go / No Go poll, every Elf is Go until the Fuel Counter-Upper.  They haven't determined the amount of fuel required yet.
Fuel required to launch a given module is based on its mass.  Specifically, to find the fuel required for a module, take its mass, divide by three, round down, and subtract 2.
For example:
The Fuel Counter-Upper needs to know the total fuel requirement.  To find it, individually calculate the fuel needed for the mass of each module (your puzzle input), then add together all the fuel values.
What is the sum of the fuel requirements for all of the modules on your spacecraft?
"""

import sys
import os
utils_path = os.path.join(os.path.dirname(os.path.abspath(__file__)), '..')
sys.path.append(utils_path)
from utils import get_input_filepath


def parse_masses(input_str: str) -> list:
    """
    Convert the input string (puzzle input) to a list of
    module masses

    Args:
        input_str (str): input string of the puzzle input

    Returns:
        list of masses ([int])
    """

    output = input_str.strip('\n').split("\n")
    return list(map(int, output)) if any(output) else []


def calculate_fuel(mass: int) -> int:
    """
    Calculate the fuel requirement given a module's `mass`

    Args:
        mass (int): module mass

    Returns:
        int of fuel requirement for the given mass
    """

    return (mass // 3) - 2


if __name__ == "__main__":
    input_text = ""
    with open(get_input_filepath(1, 2019)) as f:
        input_text = f.read()

    # Get Mass Values
    masses = parse_masses(input_text)

    # Calculate the Total Fuel Requirement
    total_fuel = sum(list(map(calculate_fuel, masses)))
    print("Solution Day 1 (Part A):")
    print("\tTotal Fuel Requirement:", total_fuel)

    # Write Answer for Part A
    with open("day_1_part_A.txt", 'w+') as f:
        f.write(str(total_fuel))

